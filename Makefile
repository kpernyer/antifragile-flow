REPO_OWNER ?= temporal-sa
REPO_NAME ?= hackathon-starter

TEMPLATES_DIR = templates
README = README.md
TEMPORAL_PID := $(shell pgrep -f "temporal server start-dev" | head -n 1)

# Language directories
LANG_DIRS = python typescript
DOCKER_REGISTRY ?= gcr.io/$(GCP_PROJECT)
GCP_PROJECT ?= kolomolo-hackathon
ENVIRONMENT ?= dev

# Default target
.DEFAULT_GOAL := all

generate-readme:
	@echo "Copy readme template"
	@cp ${TEMPLATES_DIR}/${README}.tpl ${README}

	@echo "Set owner/name for repositories"
	@sed -i "s#__OWNER__#${REPO_OWNER}#g; s#__REPO__#${REPO_NAME}#g" ${README}

# Follow the markdown-toc pre-commit hook, but use the node CLI for speed
# @link https://github.com/trussworks/pre-commit-hooks/blob/942b38145556f34d20fe6a0784f5735f6861e4b5/pre-commit-markdown-toc
	@echo "Generating table of contents"
	@bash -c "npx --yes markdown-toc --bullets='*' --append=$$'\n\n<!-- Regenerate with \"pre-commit run -a markdown-toc\" -->' -i \"$(README)\""
	@sed -i '1i<!-- This file is autogenerated - make changes in ${TEMPLATES_DIR}/${README}.tpl -->' ${README}
.PHONY: generate-readme

temporal:
	@temporal server start-dev --ip=0.0.0.0
.PHONY: temporal

temporal-stop:
	@if [ -n "$(TEMPORAL_PID)" ]; then \
		kill $(TEMPORAL_PID) || true; \
	fi
	@echo "Restart Temporal by running \"make temporal\""
.PHONY: temporal-stop

# =============================================================================
# RECURSIVE BUILD SYSTEM
# =============================================================================

# Complete setup and demo preparation with auto-dependency installation
all: install-deps clean install build lint typecheck test docker-build temporal-setup vector-store-setup demo-ready
.PHONY: all

# Setup temporal and start worker
temporal-setup:
	@echo "🚀 Setting up Temporal and starting worker..."
	@# Kill any existing temporal processes
	@pkill -f "temporal server start-dev" 2>/dev/null || true
	@sleep 2
	@# Start temporal in background
	@temporal server start-dev --ip=0.0.0.0 &
	@echo "⏳ Waiting for Temporal server to start..."
	@sleep 10
	@# Start Python worker in background
	@cd python/src && nohup uv run worker.py > worker.log 2>&1 &
	@echo "✅ Temporal server started on localhost:7233/8233"
	@echo "✅ Python worker started"
.PHONY: temporal-setup

# Setup vector store services
vector-store-setup:
	@echo "🧠 Setting up Vector Store Services..."
	@echo "🔍 Starting Neo4j and Weaviate..."
	@cd service/vector_store && docker-compose -f docker-compose.test.yml up -d
	@echo "⏳ Waiting for vector store services to start..."
	@sleep 30
	@echo "✅ Neo4j running at http://localhost:7474 (neo4j/testpassword)"
	@echo "✅ Weaviate running at http://localhost:8081"
	@echo "🧪 Vector store services ready for real capability testing!"
.PHONY: vector-store-setup

# Test vector store capabilities
vector-store-test:
	@echo "🧪 Running Vector Store Real Capability Tests..."
	@echo "💡 Note: Requires OPENAI_API_KEY environment variable"
	@cd service/vector_store && uv run python3 run_real_tests.py
.PHONY: vector-store-test

# Demo vector store services
vector-store-demo:
	@echo "🎯 VECTOR STORE SERVICES - DEMO READY!"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo ""
	@echo "🧠 REAL INTELLIGENCE CAPABILITIES:"
	@echo "   • Weaviate Semantic Search: Perfect document understanding"
	@echo "   • Neo4j Graph Intelligence: Complex relationship analysis"
	@echo "   • Compound Intelligence: Superior combined results"
	@echo ""
	@echo "🌐 ACCESS SERVICES:"
	@echo "   • Neo4j Browser: http://localhost:7474 (neo4j/testpassword)"
	@echo "   • Weaviate API: http://localhost:8081/v1"
	@echo ""
	@echo "🧪 RUN REAL TESTS:"
	@echo "   export OPENAI_API_KEY=\"your-key-here\""
	@echo "   make vector-store-test"
	@echo ""
	@echo "📂 INDIVIDUAL TESTS:"
	@echo "   cd service/vector_store"
	@echo "   uv run python3 test_real_weaviate.py    # Pure semantic intelligence"
	@echo "   uv run python3 test_real_neo4j.py       # Graph relationship intelligence"
	@echo "   uv run python3 test_real_compound.py    # Combined superiority"
	@echo ""
	@echo "🎯 INTEGRATION READY:"
	@echo "   • DocumentProcessing workflows can now use semantic chunking"
	@echo "   • Organizational intelligence with real relationship context"
	@echo "   • Multi-tenant isolation implemented (disabled for single-org demo)"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
.PHONY: vector-store-demo

# Demo ready instructions
demo-ready: vector-store-demo
	@echo ""
	@echo "🎯 ANTIFRAGILE FLOW DEMO IS READY!"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo ""
	@echo "🌐 OPEN WEB UI: http://localhost:8233"
	@echo ""
	@echo "📱 DEMO SCENARIO 1: Strategic Decision Workflow"
	@echo "   Terminal 1 (CEO Mary):    cd python/src && uv run user_client.py mary"
	@echo "   Terminal 2 (VP John):     cd python/src && uv run user_client.py john"
	@echo "   Terminal 3 (VP Isac):     cd python/src && uv run user_client.py isac"
	@echo "   Terminal 4 (VP Priya):    cd python/src && uv run user_client.py priya"
	@echo ""
	@echo "📱 DEMO SCENARIO 2: Competitor Analysis Workflow"
	@echo "   Terminal 1 (VP Sales):    cd python/src && uv run user_client.py john"
	@echo "   Terminal 2 (VP Eng):      cd python/src && uv run user_client.py isac"
	@echo "   Terminal 3 (VP Legal):    cd python/src && uv run user_client.py priya"
	@echo "   Terminal 4 (CEO):         cd python/src && uv run user_client.py mary"
	@echo ""
	@echo "🎬 DEMO SCRIPT:"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "Step 1: CEO Mary starts strategic decision (option 2)"
	@echo "        → 'We should acquire TechCorp to expand our AI capabilities'"
	@echo ""
	@echo "Step 2: VPs check priorities (option 1) and see new task"
	@echo "        → Type 'respond' to respond to workflow"
	@echo ""
	@echo "Step 3: Each VP provides input (approve/reject/modify + reasoning)"
	@echo ""
	@echo "Step 4: CEO makes final decision after seeing VP responses"
	@echo ""
	@echo "Step 5: VP Sales starts competitor analysis (option 3)"
	@echo "        → Competitor: 'RivalCorp', Threat: 'New AI product launch'"
	@echo ""
	@echo "Step 6: Engineering and Legal provide analysis"
	@echo ""
	@echo "Step 7: CEO decides strategy response"
	@echo ""
	@echo "🔍 MONITORING:"
	@echo "   • Web UI: http://localhost:8233/namespaces/default/workflows"
	@echo "   • Worker logs: tail -f python/src/worker.log"
	@echo "   • Query workflow: Option 4 in any user terminal"
	@echo ""
	@echo "🛠️  TROUBLESHOOTING:"
	@echo "   • Restart worker: pkill -f worker.py && cd python/src && uv run worker.py &"
	@echo "   • Restart temporal: make temporal-stop && make temporal"
	@echo "   • View database: cd python/src && uv run -c 'from db_inbox_service import *; print_all_data()'"
	@echo ""
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "🎯 READY TO DEMONSTRATE HUMAN-IN-THE-LOOP TEMPORAL WORKFLOWS!"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
.PHONY: demo-ready
.PHONY: all

# Install dependencies for all modules
install:
	@echo "Installing dependencies for all modules..."
	@for dir in $(LANG_DIRS); do \
		echo "Installing dependencies for $$dir..."; \
		$(MAKE) -C $$dir install || exit 1; \
	done
	@echo "All dependencies installed successfully!"
.PHONY: install

# Build all modules
build:
	@echo "Building all modules..."
	@for dir in $(LANG_DIRS); do \
		echo "Building $$dir..."; \
		$(MAKE) -C $$dir build || exit 1; \
	done
.PHONY: build

# Test all modules
test:
	@echo "Testing all modules..."
	@for dir in $(LANG_DIRS); do \
		echo "Testing $$dir..."; \
		$(MAKE) -C $$dir test || exit 1; \
	done
.PHONY: test

# Lint all modules and root Python code
lint:
	@echo "Linting all modules and root code..."
	@echo "Running ruff on root Python code..."
	@uv run ruff check . || true
	@for dir in $(LANG_DIRS); do \
		echo "Linting $$dir..."; \
		$(MAKE) -C $$dir lint || exit 1; \
	done
.PHONY: lint

# Type check all modules and root Python code
typecheck:
	@echo "Type checking all modules and root code..."
	@echo "Running mypy on root Python code..."
	@uv run mypy . || true
	@for dir in $(LANG_DIRS); do \
		if [ -f "$$dir/Makefile" ] && grep -q "typecheck:" "$$dir/Makefile"; then \
			echo "Type checking $$dir..."; \
			$(MAKE) -C $$dir typecheck || exit 1; \
		fi; \
	done
.PHONY: typecheck

# Format all modules and root Python code
format:
	@echo "Formatting all modules and root code..."
	@echo "Running ruff format on root Python code..."
	@uv run ruff format . || true
	@for dir in $(LANG_DIRS); do \
		echo "Formatting $$dir..."; \
		$(MAKE) -C $$dir format || exit 1; \
	done
.PHONY: format

# Fix linting issues automatically
lint-fix:
	@echo "Auto-fixing lint issues in all modules and root code..."
	@echo "Running ruff fix on root Python code..."
	@uv run ruff check --fix . || true
	@for dir in $(LANG_DIRS); do \
		if [ -f "$$dir/Makefile" ] && grep -q "lint-fix:" "$$dir/Makefile"; then \
			echo "Auto-fixing $$dir..."; \
			$(MAKE) -C $$dir lint-fix || exit 1; \
		fi; \
	done
.PHONY: lint-fix

# Security scan
security-scan:
	@echo "Running security scans..."
	@echo "Running bandit on Python code..."
	@uv run bandit -r . -f json -o bandit-report.json || true
	@echo "Security scan complete. Check bandit-report.json for details."
.PHONY: security-scan

# Pre-commit setup and run
pre-commit-install:
	@echo "Installing pre-commit hooks..."
	@uv run pre-commit install
.PHONY: pre-commit-install

pre-commit-run:
	@echo "Running pre-commit hooks on all files..."
	@uv run pre-commit run --all-files
.PHONY: pre-commit-run

# Quality gate - run all quality checks
quality: lint typecheck security-scan test prompts-validate
	@echo "All quality checks passed!"
.PHONY: quality

# Prompt management
prompts-validate:
	@echo "Validating prompt definitions..."
	@uv run python -m shared.prompts.cli validate
.PHONY: prompts-validate

prompts-list:
	@echo "Listing available prompts..."
	@uv run python -m shared.prompts.cli list
.PHONY: prompts-list

prompts-stats:
	@echo "Showing prompt usage statistics..."
	@uv run python -m shared.prompts.cli stats --details
.PHONY: prompts-stats

prompts-show:
	@echo "Usage: make prompts-show PROMPT_ID=<prompt_id>"
	@if [ -z "$(PROMPT_ID)" ]; then \
		echo "Error: PROMPT_ID is required. Example: make prompts-show PROMPT_ID=document_processor.analyze_document"; \
		exit 1; \
	fi
	@uv run python -m shared.prompts.cli show $(PROMPT_ID)
.PHONY: prompts-show

prompts-test:
	@echo "Usage: make prompts-test PROMPT_ID=<prompt_id> VARS='var1=value1 var2=value2'"
	@if [ -z "$(PROMPT_ID)" ]; then \
		echo "Error: PROMPT_ID is required. Example: make prompts-test PROMPT_ID=document_processor.analyze_document VARS='document_type=contract'"; \
		exit 1; \
	fi
	@if [ -n "$(VARS)" ]; then \
		uv run python -m shared.prompts.cli test $(PROMPT_ID) $(foreach var,$(VARS),--variables "$(var)") --system-user-split; \
	else \
		uv run python -m shared.prompts.cli test $(PROMPT_ID) --system-user-split; \
	fi
.PHONY: prompts-test

# Clean all modules
clean:
	@echo "Cleaning all modules..."
	@for dir in $(LANG_DIRS); do \
		echo "Cleaning $$dir..."; \
		$(MAKE) -C $$dir clean || exit 1; \
	done
.PHONY: clean

# =============================================================================
# DOCKER ORCHESTRATION
# =============================================================================

# Build Docker images for all modules
docker-build:
	@echo "Building Docker images for all modules..."
	@for dir in $(LANG_DIRS); do \
		echo "Building Docker image for $$dir..."; \
		$(MAKE) -C $$dir docker-build || exit 1; \
	done
.PHONY: docker-build

# Push Docker images
docker-push:
	@echo "Pushing Docker images..."
	@for dir in $(LANG_DIRS); do \
		echo "Pushing Docker image for $$dir..."; \
		$(MAKE) -C $$dir docker-push || exit 1; \
	done
.PHONY: docker-push

# Start all services with Docker Compose
docker-up:
	@echo "Starting all services with Docker Compose..."
	docker compose up -d
.PHONY: docker-up

# Stop all Docker services
docker-down:
	@echo "Stopping all Docker services..."
	docker compose down
.PHONY: docker-down

# =============================================================================
# TERRAFORM DEPLOYMENT
# =============================================================================

# Initialize Terraform
terraform-init:
	@echo "Initializing Terraform..."
	cd terraform && terraform init
.PHONY: terraform-init

# Plan Terraform deployment
terraform-plan:
	@echo "Planning Terraform deployment for $(ENVIRONMENT)..."
	cd terraform && terraform plan -var="environment=$(ENVIRONMENT)" -var="gcp_project=$(GCP_PROJECT)"
.PHONY: terraform-plan

# Apply Terraform deployment
terraform-apply:
	@echo "Applying Terraform deployment for $(ENVIRONMENT)..."
	cd terraform && terraform apply -var="environment=$(ENVIRONMENT)" -var="gcp_project=$(GCP_PROJECT)" -auto-approve
.PHONY: terraform-apply

# Destroy Terraform deployment
terraform-destroy:
	@echo "Destroying Terraform deployment for $(ENVIRONMENT)..."
	cd terraform && terraform destroy -var="environment=$(ENVIRONMENT)" -var="gcp_project=$(GCP_PROJECT)" -auto-approve
.PHONY: terraform-destroy

# Full deployment pipeline
deploy: build test docker-build docker-push terraform-apply
	@echo "Deployment complete!"
.PHONY: deploy

# Development setup
dev-setup: temporal docker-up
	@echo "Development environment ready!"
.PHONY: dev-setup

# CI pipeline
ci: lint typecheck security-scan test build
	@echo "CI pipeline complete!"
.PHONY: ci

# Detect platform for cross-platform package management
UNAME_S := $(shell uname -s)
UNAME_M := $(shell uname -m)

ifeq ($(UNAME_S),Darwin)
    PLATFORM := macos
    PACKAGE_MANAGER := brew
else ifeq ($(UNAME_S),Linux)
    PLATFORM := linux
    # Detect Linux distribution
    ifeq ($(shell command -v apt >/dev/null 2>&1 && echo apt),apt)
        PACKAGE_MANAGER := apt
    else ifeq ($(shell command -v yum >/dev/null 2>&1 && echo yum),yum)
        PACKAGE_MANAGER := yum
    else ifeq ($(shell command -v dnf >/dev/null 2>&1 && echo dnf),dnf)
        PACKAGE_MANAGER := dnf
    else ifeq ($(shell command -v pacman >/dev/null 2>&1 && echo pacman),pacman)
        PACKAGE_MANAGER := pacman
    else
        PACKAGE_MANAGER := unknown
    endif
else
    PLATFORM := unknown
    PACKAGE_MANAGER := unknown
endif

# Auto-install missing dependencies
install-deps:
	@echo "🔧 Auto-installing missing dependencies for $(PLATFORM)..."
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

	# Install uv if missing
	@if ! command -v uv >/dev/null 2>&1; then \
		echo "📦 Installing uv..."; \
		curl -LsSf https://astral.sh/uv/install.sh | sh; \
		echo "✅ uv installed"; \
	fi

	# Install Docker if missing (platform-specific)
ifeq ($(PLATFORM),macos)
	@if ! command -v docker >/dev/null 2>&1; then \
		echo "🐳 Installing Docker via Homebrew..."; \
		if ! command -v brew >/dev/null 2>&1; then \
			echo "🍺 Installing Homebrew first..."; \
			/bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; \
		fi; \
		brew install --cask docker; \
		echo "✅ Docker installed (you may need to start Docker Desktop)"; \
	fi
else ifeq ($(PACKAGE_MANAGER),apt)
	@if ! command -v docker >/dev/null 2>&1; then \
		echo "🐳 Installing Docker via apt..."; \
		sudo apt-get update; \
		sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release; \
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg; \
		echo "deb [arch=$$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null; \
		sudo apt-get update; \
		sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin; \
		sudo usermod -aG docker $$USER; \
		echo "✅ Docker installed (logout/login required)"; \
	fi
else ifeq ($(PACKAGE_MANAGER),yum)
	@if ! command -v docker >/dev/null 2>&1; then \
		echo "🐳 Installing Docker via yum..."; \
		sudo yum install -y yum-utils; \
		sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo; \
		sudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin; \
		sudo systemctl start docker; \
		sudo systemctl enable docker; \
		sudo usermod -aG docker $$USER; \
		echo "✅ Docker installed (logout/login required)"; \
	fi
endif

	# Install Temporal CLI if missing (platform-specific)
ifeq ($(PLATFORM),macos)
	@if ! command -v temporal >/dev/null 2>&1; then \
		echo "🔄 Installing Temporal CLI via Homebrew..."; \
		brew install temporal; \
		echo "✅ Temporal CLI installed"; \
	fi
else ifeq ($(PLATFORM),linux)
	@if ! command -v temporal >/dev/null 2>&1; then \
		echo "🔄 Installing Temporal CLI for Linux..."; \
		curl -sSf https://temporal.download/cli.sh | sh; \
		echo "✅ Temporal CLI installed"; \
	fi
endif

	# Install Node.js if missing (platform-specific)
ifeq ($(PLATFORM),macos)
	@if ! command -v node >/dev/null 2>&1; then \
		echo "🟨 Installing Node.js via Homebrew..."; \
		brew install node; \
		echo "✅ Node.js installed"; \
	fi
else ifeq ($(PACKAGE_MANAGER),apt)
	@if ! command -v node >/dev/null 2>&1; then \
		echo "🟨 Installing Node.js via NodeSource..."; \
		curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -; \
		sudo apt-get install -y nodejs; \
		echo "✅ Node.js installed"; \
	fi
else ifeq ($(PACKAGE_MANAGER),yum)
	@if ! command -v node >/dev/null 2>&1; then \
		echo "🟨 Installing Node.js via NodeSource..."; \
		curl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -; \
		sudo yum install -y nodejs; \
		echo "✅ Node.js installed"; \
	fi
endif

	# Install pnpm if missing (universal)
	@if ! command -v pnpm >/dev/null 2>&1; then \
		if command -v npm >/dev/null 2>&1; then \
			echo "📦 Installing pnpm via npm..."; \
			npm install -g pnpm; \
		elif command -v node >/dev/null 2>&1; then \
			echo "📦 Installing pnpm via corepack..."; \
			corepack enable; \
			corepack prepare pnpm@latest --activate; \
		else \
			echo "📦 Installing pnpm standalone..."; \
			curl -fsSL https://get.pnpm.io/install.sh | sh -; \
		fi; \
		echo "✅ pnpm installed"; \
	fi

	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "✅ Dependency installation complete for $(PLATFORM)!"
	@echo "💡 If Docker was just installed, you may need to:"
	@echo "   • Start Docker Desktop (macOS)"
	@echo "   • Logout/login to apply group changes (Linux)"
.PHONY: install-deps

# Check all dependencies and servers with smart installation hints
check:
	@echo "🔍 Checking all dependencies and servers..."
	@echo "🖥️  Platform: $(PLATFORM) ($(UNAME_S) $(UNAME_M))"
	@echo "📦 Package Manager: $(PACKAGE_MANAGER)"
	@echo ""
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "🔧 CORE DEPENDENCIES"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@printf "🐍 Python:       "
	@if command -v python3 >/dev/null 2>&1; then \
		echo "✅ $$(python3 --version)"; \
	else \
		echo "❌ Not installed"; \
	fi
	@printf "📦 uv:           "
	@if command -v uv >/dev/null 2>&1; then \
		echo "✅ $$(uv --version)"; \
	else \
		echo "❌ Missing (run: make install-deps)"; \
	fi
	@printf "🟨 Node.js:      "
	@if command -v node >/dev/null 2>&1; then \
		echo "✅ $$(node --version)"; \
	else \
		echo "❌ Missing (run: make install-deps)"; \
	fi
	@printf "📦 pnpm:         "
	@if command -v pnpm >/dev/null 2>&1; then \
		echo "✅ $$(pnpm --version)"; \
	else \
		echo "❌ Missing (run: make install-deps)"; \
	fi
	@echo ""
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "⚡ TEMPORAL & TOOLS"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@printf "🔄 Temporal CLI: "
	@if command -v temporal >/dev/null 2>&1; then \
		echo "✅ $$(temporal --version 2>&1 | head -n1)"; \
	else \
		echo "❌ Missing (run: make install-deps)"; \
	fi
	@printf "🐳 Docker:       "
	@if command -v docker >/dev/null 2>&1; then \
		echo "✅ $$(docker --version)"; \
	else \
		echo "❌ Missing (run: make install-deps)"; \
	fi
	@printf "🐙 Docker Compose: "
	@if command -v docker-compose >/dev/null 2>&1 || docker compose version >/dev/null 2>&1; then \
		if docker compose version >/dev/null 2>&1; then \
			echo "✅ $$(docker compose version)"; \
		else \
			echo "✅ $$(docker-compose --version)"; \
		fi; \
	else \
		echo "❌ Missing (install Docker first)"; \
	fi
	@printf "🏗️  Make:         "
	@if command -v make >/dev/null 2>&1; then \
		echo "✅ $$(make --version | head -n1)"; \
	else \
		echo "❌ Not installed (system dependency)"; \
	fi
	@echo ""
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "🔍 DEVELOPMENT TOOLS"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@printf "🔧 Terraform:    "
	@if command -v terraform >/dev/null 2>&1; then \
		echo "✅ $$(terraform --version | head -n1)"; \
	else \
		echo "❌ Not installed (brew install terraform)"; \
	fi
	@printf "☁️  gcloud:       "
	@if command -v gcloud >/dev/null 2>&1; then \
		echo "✅ $$(gcloud --version | head -n1)"; \
	else \
		echo "❌ Not installed (brew install google-cloud-sdk)"; \
	fi
	@echo ""
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "🖥️  SERVER STATUS"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@printf "🔄 Temporal Server (7233): "
	@if nc -z localhost 7233 2>/dev/null; then \
		echo "✅ Running"; \
	else \
		echo "❌ Not running (make temporal)"; \
	fi
	@printf "🌐 Temporal UI (8233):     "
	@if nc -z localhost 8233 2>/dev/null; then \
		echo "✅ Running (http://localhost:8233)"; \
	else \
		echo "❌ Not running (make temporal)"; \
	fi
	@printf "🐳 Docker Temporal (8080): "
	@if nc -z localhost 8080 2>/dev/null; then \
		echo "✅ Running (http://localhost:8080)"; \
	else \
		echo "⏸️  Not running (make docker-up)"; \
	fi
	@printf "🗄️  PostgreSQL (5432):     "
	@if nc -z localhost 5432 2>/dev/null; then \
		echo "✅ Running"; \
	else \
		echo "⏸️  Not running (make docker-up)"; \
	fi
	@printf "🔴 Redis (6379):          "
	@if nc -z localhost 6379 2>/dev/null; then \
		echo "✅ Running"; \
	else \
		echo "⏸️  Not running (make docker-up)"; \
	fi
	@echo ""
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "📦 PROJECT DEPENDENCIES"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@printf "🐍 Python env:            "
	@if [ -d python/.venv ]; then \
		echo "✅ Ready"; \
	else \
		echo "❌ Run 'make install'"; \
	fi
	@printf "🟨 TypeScript node_modules: "
	@if [ -d typescript/node_modules ]; then \
		echo "✅ Ready"; \
	else \
		echo "❌ Run 'make install'"; \
	fi
	@echo ""
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "💡 PLATFORM-AWARE QUICK FIXES"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "🔧 Auto-install missing deps:     make install-deps"
	@echo "📦 Install project dependencies:  make install"
	@echo "🚀 Start Temporal server:         make temporal"
	@echo "🐳 Start Docker services:         make docker-up"
	@echo "🧠 Start vector stores:           make vector-store-setup"
	@echo "🏗️  Build everything:             make build"
	@echo "✅ Complete setup (one command):  make"
	@echo ""
	@echo "🖥️  Platform Support:"
	@echo "   • macOS: Homebrew-based installation"
	@echo "   • Ubuntu/Debian: apt-based installation"
	@echo "   • RHEL/CentOS: yum-based installation"
	@echo "   • Fedora: dnf support"
	@echo "   • Arch Linux: pacman support"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
.PHONY: check

# Help target
help:
	@echo "Available targets:"
	@echo ""
	@echo "📋 SETUP & CHECKS:"
	@echo "  check              - Check all dependencies and servers"
	@echo "  install-deps       - Auto-install system dependencies (uv, Docker, Temporal)"
	@echo "  install            - Install project dependencies for all modules"
	@echo "  all                - Complete setup with auto-dependency installation"
	@echo ""
	@echo "🔨 DEVELOPMENT:"
	@echo "  build              - Build all modules"
	@echo "  test               - Test all modules"
	@echo "  dev-setup          - Setup development environment"
	@echo ""
	@echo "🧹 CODE QUALITY:"
	@echo "  lint               - Lint all modules and root code"
	@echo "  typecheck          - Type check all modules and root code"
	@echo "  format             - Format all modules and root code"
	@echo "  lint-fix           - Auto-fix linting issues"
	@echo "  security-scan      - Run security scans"
	@echo "  quality            - Run all quality checks (includes prompts)"
	@echo "  pre-commit-install - Install pre-commit hooks"
	@echo "  pre-commit-run     - Run pre-commit hooks"
	@echo ""
	@echo "📝 PROMPT MANAGEMENT:"
	@echo "  prompts-validate   - Validate all prompt definitions"
	@echo "  prompts-list       - List all available prompts"
	@echo "  prompts-stats      - Show prompt usage statistics"
	@echo "  prompts-show       - Show specific prompt (PROMPT_ID=<id>)"
	@echo "  prompts-test       - Test prompt rendering (PROMPT_ID=<id> VARS='key=val')"
	@echo ""
	@echo "🔄 TEMPORAL:"
	@echo "  temporal           - Start Temporal server"
	@echo "  temporal-stop      - Stop Temporal server"
	@echo "  temporal-setup     - Complete Temporal setup with worker"
	@echo ""
	@echo "🧠 VECTOR STORE SERVICES:"
	@echo "  vector-store-setup - Start Neo4j + Weaviate services"
	@echo "  vector-store-test  - Run real capability tests (needs OPENAI_API_KEY)"
	@echo "  vector-store-demo  - Show vector store demo instructions"
	@echo ""
	@echo "🐳 DOCKER:"
	@echo "  docker-build       - Build Docker images"
	@echo "  docker-push        - Push Docker images"
	@echo "  docker-up          - Start services with Docker Compose"
	@echo "  docker-down        - Stop Docker services"
	@echo ""
	@echo "☁️  DEPLOYMENT:"
	@echo "  terraform-init     - Initialize Terraform"
	@echo "  terraform-plan     - Plan Terraform deployment"
	@echo "  terraform-apply    - Apply Terraform deployment"
	@echo "  deploy             - Full deployment pipeline"
	@echo ""
	@echo "🔄 PIPELINES:"
	@echo "  ci                 - Run CI pipeline (lint, typecheck, security, test, build)"
	@echo "  clean              - Clean all modules"
.PHONY: help
