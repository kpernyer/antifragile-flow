[project]
name = "antifragile-flow"
version = "0.1.0"
description = "Organizational Twin System with Human-AI Collaboration"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "temporalio>=1.17.0,<2",
    "openai-agents>=0.2.3,<=0.2.9",
    "temporalio[openai-agents]>=1.17.0",
    "pydantic>=2.10.6,<3",
    "pyyaml>=6.0.2",
    "sqlalchemy>=2.0.43",
    "neo4j>=5.15.0",
    "psycopg2-binary>=2.9.7",
    "redis>=5.0.0",
    "httpx>=0.27.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "jinja2>=3.1.0",
    "rich>=13.0.0",
    "minio>=7.0.0",
]

[dependency-groups]
dev = [
    "ruff>=0.12.11",
    "mypy>=1.8.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "pre-commit>=3.6.0",
    "poethepoet>=0.37.0",
    "watchdog>=6.0.0",
]

[tool.poe.tasks]
# Development
dev = "watchmedo auto-restart -p '*.py' -R -- uv run python/src/worker.py"
worker = "uv run python/src/worker.py"
starter = "uv run python/src/starter.py"

# Code Quality
lint = "ruff check ."
lint-fix = "ruff check --fix ."
format = "ruff format ."
format-check = "ruff format --check ."
typecheck = "mypy ."
test = "pytest"
test-cov = "pytest --cov=. --cov-report=html --cov-report=term"

# Combined checks
check = ["lint", "format-check", "typecheck", "test"]
fix = ["lint-fix", "format"]

# Pre-commit
pre-commit-install = "pre-commit install"
pre-commit-run = "pre-commit run --all-files"

# Prompt management
prompts-validate = "python -m shared.prompts.cli validate"
prompts-list = "python -m shared.prompts.cli list"
prompts-stats = "python -m shared.prompts.cli stats"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Package configuration
[tool.hatch.build.targets.wheel]
packages = ["shared", "agents", "workflows", "actors"]

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 100
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "node_modules",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate (commented-out code)
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "PLR2004"]  # Allow assert and magic values in tests
"**/__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["shared", "agents", "workflows", "actors", "frontend"]
force-sort-within-sections = true

# MyPy configuration
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
implicit_reexport = false
strict_equality = true
show_error_codes = true

# Exclude patterns
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "__pycache__/",
    ".mypy_cache/",
]

# Module-specific configurations
[[tool.mypy.overrides]]
module = [
    "temporalio.*",
    "neo4j.*",
    "psycopg2.*",
    "redis.*",
    "matplotlib.*",
    "networkx.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--asyncio-mode=auto",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["shared", "agents", "workflows", "actors", "frontend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
